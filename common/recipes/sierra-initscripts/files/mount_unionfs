#!/bin/sh
# Provides tools to mount and umount unionfs specific to SWIR system.

# import run environment
. /etc/run.env

# This executable
this_e=$( basename $0 )

# Set global variables (e.g. outside of functions).
flash_mntpt_g=${UFS_ROOT}
root_etc_g=/etc
root_data_g=/data
ufs_type=${UFS_T}

# Returns SWI_TRUE if unionfs should fudge rootfs.
is_fudge_ro_rootfs_allowed()
{
    local ret=${SWI_FALSE}
    local A=$( cat /proc/cmdline | grep -o "fudge_ro_rootfs=true" )
    if [ "x${A}" == "xfudge_ro_rootfs=true" ] ; then
        swi_log "RO rootfs will be fudged."
        ret=${SWI_TRUE}
    else
        swi_log "RO rootfs will not be fudged."
    fi

    return ${ret}
}


# Start union fs
mount_unionfs_start()
{
    local ret=${SWI_OK}

    is_fudge_ro_rootfs_allowed
    if [ $? -ne ${SWI_TRUE} ] ; then
        swi_log "Not allowed to fudge rootfs."
        return ${SWI_ERR}
    fi

    # Try to make /etc writable.
    mkdir -p ${flash_mntpt_g}${root_etc_g}
    mount -t ${ufs_type} -o dirs=${flash_mntpt_g}${root_etc_g}=rw:${root_etc_g}=ro ${ufs_type} ${root_etc_g}
    if [ $? -ne 0 ] ; then
        swi_log "Unable to mount unionfs file system (${flash_mntpt_g}${root_etc_g}=rw, ${root_etc_g}=ro, union=${root_etc_g})."
        return ${SWI_ERR}
    fi

    # Try to make /data writable
    mkdir -p ${flash_mntpt_g}${root_data_g}
    mount -t ${ufs_type} -o dirs=${flash_mntpt_g}${root_data_g}=rw:${root_data_g}=ro ${ufs_type} ${root_data_g}
    if [ $? -ne 0 ] ; then
        swi_log "Unable to mount unionfs file system (${flash_mntpt_g}${root_data_g}=rw, ${root_data_g}=ro, union=${root_data_g})."
        umount -l ${root_etc_g}
        return ${SWI_ERR}
    fi

    return ${ret}
}

# Stop union fs.
mount_unionfs_stop()
{
    ret=${SWI_OK}

    is_fudge_ro_rootfs_allowed
    if [ $? -ne ${SWI_TRUE} ] ; then
        swi_log "Nothing to do (fudging of rootfs is not allowed)."
        return ${ret}
    fi

    # Unmount unionfs (don't care about the result).
    umount -l ${root_etc_g} &>/dev/null
    umount -l ${root_data_g} &>/dev/null

    return ${ret}
}


#
# Execution starts here.
#
case "$1" in
    start)
        mount_unionfs_start
    ;;

    stop)
        mount_unionfs_stop
    ;;

    *)
        echo "Usage: ${this_e} {start | stop}"
        exit 1
    ;;
esac

exit 0

