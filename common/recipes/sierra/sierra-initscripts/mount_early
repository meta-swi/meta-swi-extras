#!/bin/sh
# Some file systems must be mounted early in the boot process.

# import run environment
source /etc/run.env

# This executable
this_e=$( basename $0 )

# Yaffs2 FS mount options.
YAFFS2_MNTOPT="rw,tags-ecc-off,smackfsdef='_'"

# This is required by UFS as well as Legato. It must be executed
# no matter what.
mount_early_scratch_start()
{
    mount_yaffs_fs ${UFS_MTDEV_NAME} ${FLASH_MOUNTPOINT}
    return $?
}

# Generic function to mount yaffs2 filesystem
mount_yaffs_fs()
{
    local ret=${SWI_OK}
    local mtd_part_name=$1
    local mtd_dev_num=
    local mntpt=$2

    # Get the device number
    mtd_dev_num=$( cat /proc/mtd | \
                   grep ${mtd_part_name} | \
                   awk '{print $1}' | \
                   sed 's/://g' | \
                   grep -o "[0-9]*" )

    # Mount YAFFS2 volume
    mount -t yaffs2 /dev/mtdblock${mtd_dev_num} ${mntpt} -o${YAFFS2_MNTOPT}
    if [ $? -ne 0 ] ; then
        swi_log "Unable to mount /dev/mtdblock${mtd_dev_num} onto ${mntpt}."
        ret=${SWI_ERR}
    fi

    return ${ret}
}

# Unmount scratch file system
mount_early_scratch_stop()
{
    local ret=${SWI_OK}
    local mntpt=${FLASH_MOUNTPOINT}

    # There is nothing we can do if umount fails, so do not check
    # the result of the operation.
    umount -l ${mntpt}

    return ${ret}
}

mount_early_legato_start()
{
    mount_yaffs_fs ${LEGATO_MTDEV_NAME} ${FLASH_MOUNTPOINT_LEGATO}
    return $?
}

# Unmount scratch file system
mount_early_legato_stop()
{
    local ret=${SWI_OK}
    local mntpt=${FLASH_MOUNTPOINT_LEGATO}

    # There is nothing we can do if umount fails, so do not check
    # the result of the operation.
    umount -l ${mntpt}

    return ${ret}
}



mount_early_userrw_start()
{
    local ret=${SWI_OK}
    local mtd_part_name=${USERRW_MTDEV_NAME}
    local mtd_dev_num=
    local mntpt=${USERRW_MTDEV_MOUNTPOINT}
    local tmpvar=

    # Get the device number
    mtd_dev_num=$( cat /proc/mtd | \
                   grep ${mtd_part_name} | \
                   awk '{print $1}' | \
                   sed 's/://g' | \
                   grep -o "[0-9]*" )

    # Mount userrw YAFFS2 volume
    mount -t yaffs2 /dev/mtdblock${mtd_dev_num} ${mntpt} -o${YAFFS2_MNTOPT}
    if [ $? -ne 0 ] ; then
        swi_log "Unable to mount /dev/mtdblock${mtd_dev_num} onto ${mntpt}."
        return ${SWI_ERR}
    fi

    return ${ret}
}

# Unmount userrw file system
mount_early_userrw_stop()
{
    local ret=${SWI_OK}
    local mntpt=${USERRW_MTDEV_MOUNTPOINT}

    # There is nothing we can do if umount fails, so do not check
    # the result of the operation.
    umount -l ${mntpt}

    return ${ret}
}

# Early mount pseudo file systems. It is not necessary to unmount
# these before rebooting.
mount_early_pseudo()
{
    local ret=0

    # mount mdev.
    mount -t tmpfs mdev /dev -o rw,relatime,size=${DEVDIR_SIZE},mode=0755

    # Show mqueue stuff.
	mkdir -p /dev/mqueue
	mount -t mqueue none /dev/mqueue

	# Create multiplexor device
    mknod -m 666 /dev/ptmx c 5 2

    # mount devpts for consoles and such.
    mkdir -p /dev/pts
    # mount -t devpts devpts /dev/pts
    mount -t devpts none /dev/pts -o mode=0620,gid=5,smackfsdef='_'

    # DM, FIXME: Restrict the size of this volume.
	# Mount shared memory.
    mkdir -p /dev/shm
    mount -t tmpfs tmpfs /dev/shm -o mode=0777,smackfsdef='_'

    # Kick hotplugging and start mdev.
    echo "/sbin/mdev" > /proc/sys/kernel/hotplug
    mdev -s
}

mount_early_other()
{
    local ret=0

    # DM, FIXME: Restrict the size of this volume.
    # Need /run to be volatile.
    mount -t tmpfs tmpfs /run -o mode=0755,nodev,nosuid,strictatime,smackfsdef='_'

    # DM, FIXME: Restrict the size of this volume.
    # Need /var to be volatile.
    mount -t tmpfs tmpfs /var -o mode=0755,nodev,nosuid,strictatime,smackfsdef='_'

    # Do not restrict the size this file system.
    mount -t tmpfs tmpfs /tmp -o mode=0755,nodev,nosuid,strictatime,smackfsdef='_'

    return ${ret}
}

# Necessary early dirs
mount_early_create_dirs()
{
    local ret=0

    mkdir -p /var/run/dbus
    mkdir -p /var/lock/subsys
    mkdir -p /var/log
    mkdir -p /var/lib/urandom

    return ${ret}
}

# Chooser.
mount_early_start()
{
	local ret=0

    # list of methods to execute
    local method_list="
                       mount_early_pseudo
                       mount_early_other
                       mount_early_create_dirs
                       mount_early_scratch_start
                       mount_early_legato_start
                       mount_early_userrw_start
                      "

    for method in ${method_list} ; do
        echo "${this_e}: Executing ${method}... "
        ${method}
        if [ $? -ne 0 ] ; then return 1 ; fi
    done

    return ${ret}
}

# Stop all.
mount_early_stop()
{
    local ret=0

    # list of methods to execute
    local method_list="
                       mount_early_scratch_stop
                       mount_early_legato_stop
                       mount_early_userrw_stop
                      "

    for method in ${method_list} ; do
        echo "${this_e}: Executing ${method}... "
        ${method}
        if [ $? -ne 0 ] ; then return 1 ; fi
    done

    return ${ret}
}


#
# Execution starts here.
#
case "$1" in
    start)
        mount_early_start
    ;;

    stop)
        mount_early_stop
    ;;

    *)
        echo "Usage: ${this_e} {start | stop}"
        exit 1
    ;;
esac

exit 0

