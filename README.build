Table of Contents
=================

1. How to build SWI Yocto BSP
2. Other notes


1. How to build SWI Yocto BSP
-----------------------------

1.1 Clone necessary git trees:

Clone poky from yocto website and switch to the yocto-1.6.1 tag:

	$ git clone git://git.yoctoproject.org/poky.git
	$ cd poky
	$ git checkout -b yocto-1.6.1-local 30b8d9378b8260e452552b806610dc9b6fe0b69f
	$ cd ../

Clone meta-openembedded and switch to the following commit 
8e6f6e49c99a12a0382e48451f37adac0181362f (git checkout -b yocto-1.6.1-local origin/daisy on september 30, 2014):

	$ git clone git://git.openembedded.org/meta-openembedded
	$ cd meta-openembedded
	$ git checkout -b yocto-1.6.1-local 8e6f6e49c99a12a0382e48451f37adac0181362f
	$ cd ../

1.2 Clone git trees from github and switch to yocto-1.6 branch when necessary:

	$ git clone https://github.com/MalvernPark/meta-swi.git
	$ cd meta-swi
	$ git checkout -b yocto-1.6 origin/yocto-1.6 
	$ cd ../
	
	$ git clone https://github.com/MalvernPark/meta-swi-extras.git
	$ cd meta-swi-extras
	$ git checkout -b yocto-1.6 origin/yocto-1.6
	$ cd ../

	$ git clone --bare https://github.com/MalvernPark/linux-yocto-3.4.git

1.3 Enter the cloned meta-swi-extras directory to build bsp project:

	$ cd meta-swi-extras

1.4 Show the help information of the build.sh script:

	$ ./build.sh

Which supports the following parameters:

	$ ./build.sh
		-p <poky_dir>
		-o <meta-openembedded dir>
		-l <SWI meta layer>
		-m <SWI machine type>
		-b <build_dir>
		-t <number of bitbake tasks>
		-j <number of make threads>
		-d (enable more packages for debugging)
		-c (enable command line mode)
        	-r (enable preempt-rt kernel)
        	-q (enable Qualcomm Proprietary bin)

Notes:
 * "-p" option is to specify the location of the poky directory
 * "-o" option is to specify the location of the meta-openembedded directory
 * "-l" option is to specify the location of the meta-swi directory
 * "-m" option is to specify which BSP/machine is to build: swi-s6 or swi-mdm9x15
 * "-b" option is to specify the location of the build directory
 * "-t" and "-j" options can be used to accelerate the build process
   by spawning more number of bitbake tasks and make threads. The empirical
   number should be that of your CPU plus one.
 * With the "-c" option, you will be left within a shell where you can use
   bitbake to compile any package.
 * "-d" option can be used to enable more packages for debugging purpose.
 * "-r" option is used to build a preempt-rt kernel instead of standard
   linux kernel.
 * "-q" options is to build Qualcomm Proprietary binary package.

1.5 Examples of using the build.sh script to kick off build:

To allow maximum 9 bitbake tasks and 9 make threads, and build an swi-s6 image
for debugging purpose:

	$ ./build.sh -p ../poky/ -o ../meta-openembedded/ \
	  -l ../meta-swi -m swi-s6 -t 9 -j 9 -d

or build a swi-mdm9x15 image:

	$ ./build.sh -p ../poky/ -o ../meta-openembedded/ \
	  -l ../meta-swi -m swi-mdm9x15 -q -t 9 -j 9 -d

To enter the command line mode:

	$ ./build.sh -p ../poky/ -o ../meta-openembedded/ \
	  -l ../meta-swi -m swi-s6 -t 9 -j 9 -c

To build a preempt-rt kernel:

	$ ./build.sh -p ../poky/ -o ../meta-openembedded/ \
	  -l ../meta-swi -m swi-mdm9x15 -q -t 9 -j 9 -r

More examples:

standard:
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-mdm9x15 -q -t 4 -j 4 -d
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-s6 -q -t 4 -j 4 -d
minimal:
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-mdm9x15 -q -t 4 -j 4
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-s6 -q -t 4 -j 4
preempt-rt:
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-mdm9x15 -q -t 4 -j 4 -d -r
shell:
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-mdm9x15 -q -t 4 -j 4 -c
./build.sh -p ../poky/ -o ../meta-openembedded/ -l ../meta-swi -m swi-s6 -q -t 4 -j 4 -c

2. Other notes
--------------
For more yocto reference, please check the yocto websit:
http://www.yoctoproject.org
